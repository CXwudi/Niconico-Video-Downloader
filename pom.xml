<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.cxwudi</groupId>
  <artifactId>niconico-video-downloader</artifactId>
  <version>3.0.1-SNAPSHOT</version>

  <name>niconico-video-downloader</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- Can not set compile version higher than java 10, otherwise, Maven install will get error -->
    <java.version>11</java.version>
    <maven.compiler.source>1.${java.version}</maven.compiler.source>
    <maven.compiler.target>1.${java.version}</maven.compiler.target>
    <junit.jupiter.version>5.5.2</junit.jupiter.version>
    
    <mainClassToRun>com.cxwudi.niconico_videodownloader.Main</mainClassToRun>
  </properties>

  <dependencies>
    <!-- Junit 5 Jupiter -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- The Selenium library -->
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-java</artifactId>
      <version>3.141.59</version>
    </dependency>

    <!-- Apache Common Configuration, use for reading .property file -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-configuration2</artifactId>
      <version>2.6</version>
    </dependency>

    <!-- The JAVE (Java Audio Video Encoder) library, which warp and contains a ffmpeg.exe executable 
      file in jar -->
    <dependency> <!-- you can just use his ffmpeg.exe if u want -->
      <groupId>ws.schild</groupId>
      <artifactId>jave-all-deps</artifactId>
      <version>2.6.1</version>
    </dependency>

    <!-- Java MP4 Parser, to warp raw .aac file into .m4a file, without re-encoding -->
    <!-- Don't use new version, api changes a lot -->
    <!-- currently using mp4box.exe in stead of using this library, for better performance -->
    <!-- <dependency> 
    <groupId>com.googlecode.mp4parser</groupId> 
    <artifactId>isoparser</artifactId> 
      <version>1.1.22</version> 
      </dependency> -->

    <!-- Too bad that no maven repository for youtube-dl, have to manually update youtube-dl.exe file 
      in lib/ -->
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>com.lazerycode.selenium</groupId> <!-- plug-in that can download Selenium exe drivers -->
        <artifactId>driver-binary-downloader-maven-plugin</artifactId>
        <version>1.0.17</version>
        <configuration>
          <!-- root directory that downloaded driver binaries will be stored in -->
          <rootStandaloneServerDirectory>lib/selenium_drivers/bin</rootStandaloneServerDirectory>
          <!-- Where you want to store downloaded zip files -->
          <downloadedZipFileDirectory>lib/selenium_drivers/zips</downloadedZipFileDirectory>
          <!-- Location of a custom repository map -->
          <customRepositoryMap>lib/selenium_drivers/repo.xml</customRepositoryMap>
          <!-- This will ensure that the plugin only downloads binaries for the current OS, this will 
            override anything specified in the <operatingSystems> configuration -->
          <onlyGetDriversForHostOperatingSystem>true</onlyGetDriversForHostOperatingSystem>
          <!-- Operating systems you want to download binaries for (Only valid options are: windows, 
            linux, osx) -->
          <operatingSystems>
            <windows>true</windows>
            <linux>true</linux>
            <mac>true</mac>
          </operatingSystems>
          <!-- Download 32bit binaries -->
          <thirtyTwoBitBinaries>true</thirtyTwoBitBinaries>
          <!-- Download 64bit binaries -->
          <sixtyFourBitBinaries>true</sixtyFourBitBinaries>
          <!-- If set to false will download every version available (Other filters will be taken into 
            account -->
          <onlyGetLatestVersions>true</onlyGetLatestVersions>

          <!-- Throw an exception if any specified binary versions that the plugin tries to download 
            do not exist -->
          <throwExceptionIfSpecifiedVersionIsNotFound>false</throwExceptionIfSpecifiedVersionIsNotFound>
          <!-- Number of times to attempt to download each file -->
          <fileDownloadRetryAttempts>2</fileDownloadRetryAttempts>
          <!-- Number of ms to wait before timing out when trying to connect to remote server to download 
            file -->
          <fileDownloadConnectTimeout>20000</fileDownloadConnectTimeout>
          <!-- Number of ms to wait before timing out when trying to read file from remote server -->
          <fileDownloadReadTimeout>10000</fileDownloadReadTimeout>
          <!-- Overwrite any existing binaries that have been downloaded and extracted -->
          <overwriteFilesThatExist>false</overwriteFilesThatExist>
          <!-- Check file hashes of downloaded files. Default: true -->
          <checkFileHashes>false</checkFileHashes>
          <!-- auto detect system proxy to use when downloading files -->
          <!-- To specify an explicit proxy set the environment variables http.proxyHost and http.proxyPort -->
          <useSystemProxy>true</useSystemProxy>
        </configuration>
        <executions>
          <execution> <!-- in eclipse it shows error of the phase, but it has no problem in fact, so ignore it -->
            <phase>generate-sources</phase> <!-- avaliable phases => https://balamaci.ro/maven-lifecycles-explained/ -->
            <goals>
              <goal>selenium</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.internetitem</groupId>
        <artifactId>write-properties-file-maven-plugin</artifactId>
        <version>1.0.1</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>write-properties-file</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.basedir}/data</outputDirectory>
              <filename>system_config.properties</filename>
              <properties>
                <property>
                  <name>webdriver.edge.driver</name>
                  <value>${webdriver.edge.driver}</value>
                </property>
                <property>
                  <name>webdriver.opera.driver</name>
                  <value>${webdriver.opera.driver}</value>
                </property>
                <property>
                  <name>webdriver.chrome.driver</name>
                  <value>${webdriver.chrome.driver}</value>
                </property>
              </properties>
              <comment>Niconico Video Downloader Selenium drivers location</comment>
            </configuration>
          </execution>
        </executions>
      </plugin>


      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M3</version>
        <executions>
          <execution>
            <id>default-test</id><!-- to force change the order of surefire test in effective POM, since 
              eclipse IDE add default order on test using id here -->
            <phase>test</phase>
            <goals>
              <goal>test</goal><!-- so far we choose to not change the order, but change the order of 
                selenium plugin to the frontier -->
            </goals>
            <configuration>
              <systemPropertyVariables>
                <webdriver.chrome.driver>${webdriver.chrome.driver}</webdriver.chrome.driver>
                <webdriver.opera.driver>${webdriver.opera.driver}</webdriver.opera.driver>
                <webdriver.edge.driver>${webdriver.edge.driver}</webdriver.edge.driver>
              </systemPropertyVariables>
              <skipTests>true</skipTests>
            </configuration>
          </execution>
        </executions>
        <!-- Learn mavan: <configuration> tab put here will set parameter for all executions in <executions> -->
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>
        <executions>
          <execution>
            <phase>test</phase>
            <goals>
              <goal>java</goal>
            </goals>
            <configuration>
              <mainClass>${mainClassToRun}</mainClass>
              <arguments>
              </arguments>
              <systemProperties>
                <systemProperty>
                  <key>webdriver.edge.driver</key>
                  <value>${webdriver.edge.driver}</value>
                </systemProperty>
                <systemProperty>
                  <key>webdriver.opera.driver</key>
                  <value>${webdriver.opera.driver}</value>
                </systemProperty>
                <systemProperty>
                  <key>webdriver.chrome.driver</key>
                  <value>${webdriver.chrome.driver}</value>
                </systemProperty>
              </systemProperties>
            </configuration>
          </execution>
        </executions>

      </plugin>
      <plugin> <!-- Need this plugin to allow Java 11 -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>2.5</version>
        <configuration>
          <generateBackupPoms>false</generateBackupPoms>
        </configuration>
      </plugin>

      <plugin> <!-- Update Eclipse IDE own maven-compiler-plugin from 3.1.0 to 3.8.1, in order to support compilation 
          of Java 11 -->
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <release>${java.version}</release>
        </configuration>
      </plugin>

    </plugins>

    <!-- Auto-generated plug-in manager to get rid of execution phase error shown in Eclipse IDE -->
    <pluginManagement>
      <plugins>
        <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence 
          on the Maven build itself. -->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>
                      com.internetitem
                    </groupId>
                    <artifactId>
                      write-properties-file-maven-plugin
                    </artifactId>
                    <versionRange>
                      [1.0.1,)
                    </versionRange>
                    <goals>
                      <goal>
                        write-properties-file
                      </goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore></ignore>
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>
                      com.lazerycode.selenium
                    </groupId>
                    <artifactId>
                      driver-binary-downloader-maven-plugin
                    </artifactId>
                    <versionRange>
                      [1.0.17,)
                    </versionRange>
                    <goals>
                      <goal>selenium</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore></ignore>
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
  <description>A new evolution of Niconico video downloader that use maven, youtube-dl, Selenium, and etc. </description>
</project>
